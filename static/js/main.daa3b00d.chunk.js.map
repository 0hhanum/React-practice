{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","slice","map","genre","index","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQA4BeA,MAzBf,YAA0D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC3C,OAAO,sBAAKC,UAAU,QAAf,UACH,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAGK,UAAU,iBAAb,UAA+BH,EAAQM,MAAM,EAAG,KAAhD,SACA,oBAAIH,UAAU,gBAAd,SACKD,EAAOK,KAAI,SAACC,EAAOC,GAAR,OACR,qBAAgBN,UAAU,gBAA1B,eAA6CK,EAA7C,MAASC,eC8EdC,G,kNArDbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAcVC,U,sBAAY,8BAAAC,EAAA,sEACmCC,IAAMC,IAAI,6CAD7C,gBACcJ,EADd,EACFK,KAAQA,KAAQL,OACxB,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IAFzB,2C,uDAIZ,WACEQ,KAAKN,c,oBAEP,WACE,MAA8BM,KAAKT,MAA3BE,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,UAChB,OAEE,aADA,CACA,WAAST,UAAU,YAAnB,SACGS,EACG,qBAAKT,UAAU,SAAf,SACA,sBAAMA,UAAU,eAAhB,yBAGA,qBAAKA,UAAU,SAAf,SAEIU,EAAON,KAAI,SAAAc,GAAK,OACd,cAAE,EAAF,CAEEC,GAAID,EAAMC,GACVxB,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAME,mBACdrB,OAAQmB,EAAMnB,QANTmB,EAAMC,e,GAtCbE,IAAMC,YChCxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.daa3b00d.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Movie({ year, title, summary, poster, genres }) {\n    return <div className=\"movie\">\n        <img src={poster} alt={title} title={title}></img>\n        <div className=\"movie__data\">\n            <h3 className=\"movie__title\">{title}</h3>\n            <h3 className=\"movie__year\">{year}</h3>\n            <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\n            <ul className=\"movie__genres\">\n                {genres.map((genre, index) =>\n                    <li key={index} className=\"genres__genre\">  {genre} </li>\n                )}\n            </ul>\n        </div>\n    </div>\n};\n\nMovie.propTypes = {\n    id: PropTypes.number.isRequired,\n    year: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    summary: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Movie;","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\n// component 는 대문자로 시작해야함. 규칙\n// const Test = ({ name, age }) => {\n//   return (\n//     <div>\n//       <h1> {name}  </h1>\n//       <h3> {age} </h3>\n//     </div>\n//   );\n// };\n\n// Test.propTypes = {\n//   name: PropTypes.string.isRequired,\n//   age: PropTypes.number.isRequired,\n// };\n\n// const list = [\n//   { id: 1, \"name\": \"a\", \"age\": 20 },\n//   { id: 2, \"name\": \"b\", \"age\": 26 },\n//   { id: 3, \"name\": \"c\", \"age\": 22 },\n// ]\n\n// function component\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       {list.map(element => <Test key={element.id} name={element.name} age={element.age} />)}\n//     </div>\n//   );\n// };\n/* react 내에서 모든 element 는 달라야함. 이를 구분하기 위해 key 값을 넣어줌. */\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n  /*\n  add = () => {\n    // this.setState({ count: this.state.count + 1 })\n    this.setState(current => ({ count: current.count + 1 }))\n    // setState 호출 => react 는 새로운 state 와 함께 render 를 다시 진행\n  };\n  minus = () => {\n    // this.setState({ count: this.state.count - 1 })\n    this.setState(current => ({ count: current.count - 1 }))\n  };\n  */\n\n  getMovies = async () => {\n    const { data: { data: { movies } } } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\");\n    this.setState({ movies, isLoading: false });\n  };\n  componentDidMount() {\n    this.getMovies();\n  };\n  render() {\n    const { movies, isLoading } = this.state;\n    return (\n      // class 로 하면 리액트가 js 의 Class 와 혼동하니 className 부여\n      <section className=\"container\">\n        {isLoading\n          ? <div className=\"loader\">\n            <span className=\"loader__text\">Loading..</span>\n          </div>\n          : (\n            <div className=\"movies\">\n              {\n                movies.map(movie => (\n                  < Movie\n                    key={movie.id}\n                    id={movie.id}\n                    year={movie.year}\n                    title={movie.title}\n                    summary={movie.summary}\n                    poster={movie.medium_cover_image}\n                    genres={movie.genres} />\n                ))}\n            </div>\n          )\n        }\n      </section>\n    );\n  };\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n/*\n 1. jsx => 위와 같이 js 와 react 를 혼합해 사용하는 react 내의 개념\n App 과 같은 형태를 react 에서 component 라 칭함.\n 즉, jsx 는 js 만의 HTML, component 를 만들고 어떻게 사용하는지에 대한 것.\n\n 2. jsx 에서 component 는 정보를 담아 보낼 수 있다.\n */\n\n\n"],"sourceRoot":""}